// // Листинг 2
// console.log("Start algorithm!");
// setTimeout(function timeout() {
//     console.log("This will be printed after 5 seconds!");
// }, 5000);
// console.log("End synchronous code.");

// Вот так все просто. Синхронные команды выполняются в стеке вызовов, а все
// асинхронное выполняется API окружения, отложенные задачи попадают в очередь,
// а цикл событий следит за стеком и очередью отложенных задач, и как только стек
// опустошается, начинает заполнять его отложенными задачами. Исходя из этого
// можно понять, что интервал указанных в функции setTimeout не гарантирует нам
// что функция обратного вызова будет вызвана ровно через пять секунд, т.к. цикл
// событий переместит её в стек вызовов для выполнения, только когда он будет пуст.
// Если у нас в этот момент будет выполняться сложная синхронная операция, которая
// займет стек на несколько секунд, то наша функция обратного вызова будет вызвана
// с большей задержкой.
